// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                     String           @id @default(uuid())
  intra_id               Int              @unique
  username               String           @unique
  email                  String           @unique
  avatar                 String?
  isOnline               Boolean          @default(false)
  ownedRooms             Rooms[]          @relation("roomOner")
  rooms                  UsersRooms[]     @relation("userRooms")
  hostedGames            Games[]          @relation("gameHost")
  guestedGames           Games[]          @relation("gameGuest")
  winnedGames            Games[]          @relation("gameWinner")
  friendOf               Friends[]        @relation("friendOf")
  friendWith             Friends[]        @relation("friends")
  friendRequestsSent     FriendRequests[] @relation("sent")
  friendRequestsRecieved FriendRequests[] @relation("recieved")
  conversationsStarted     UsersConversation[] @relation("conversationStarted")
  conversationsEngaged     UsersConversation[] @relation("conversationEngaged")
  messagesSent           Messages[]
  notification           Notifications[]
  blockedBy              Block[] @relation("blockedBy")
  blocked              Block[] @relation("blocked")
}

model FriendRequests {
  id         Int                 @id @default(autoincrement())
  senderId   String
  recieverId String
  status     FriendRequestStatus @default(PENDING)
  sender     Users               @relation("sent", fields: [senderId], references: [id])
  reciever   Users               @relation("recieved", fields: [recieverId], references: [id])
}

model Friends {
  id         String @id @default(uuid())
  friendOfId String
  friendId   String
  friendOf   Users  @relation("friendOf", fields: [friendOfId], references: [id])
  friendWith Users  @relation("friends", fields: [friendId], references: [id])
}

model Conversations {
  id       String     @id @default(uuid())
  messages Messages[]
  usersConversation UsersConversation?
  room     Rooms?
}

model UsersConversation {
  id String @id @default(uuid())
  userOneId String
  userTwoId String
  conversationId String @unique
  userOne Users @relation("conversationStarted", fields: [userOneId], references: [id])
  userTwo Users @relation("conversationEngaged", fields: [userTwoId], references: [id])
  conversation Conversations @relation(fields: [conversationId], references: [id])
}

model Messages {
  id             String        @id @default(uuid())
  conversationId String
  senderId String
  sender Users @relation(fields: [senderId], references: [id])
  converstion    Conversations @relation(fields: [conversationId], references: [id])
  content        String
}

model Rooms {
  id             String        @id @default(uuid())
  ownerId        String
  owner          Users         @relation("roomOner", fields: [ownerId], references: [id])
  name           String        @unique
  type           RoomType      @default(PUBLIC)
  password       String?
  users          UsersRooms[]  @relation("roomUsers")
  conversation   Conversations @relation(fields: [conversationId], references: [id])
  conversationId String        @unique
}

model UsersRooms {
  id     String    @id @default(uuid())
  user   Users     @relation("userRooms", fields: [userId], references: [id])
  room   Rooms     @relation("roomUsers", fields: [roomId], references: [id])
  roomId String
  userId String
  role   RoomRoles @default(USER)
}

model Games {
  id       String     @id @default(uuid())
  hostId   String
  guestId  String
  status   GameStatus @default(CEATED)
  winnerId String?
  host     Users      @relation("gameHost", fields: [hostId], references: [id])
  guest    Users      @relation("gameGuest", fields: [guestId], references: [id])
  winner   Users?     @relation("gameWinner", fields: [winnerId], references: [id])
}

model Notifications {
  id Int @id @default(autoincrement())
  content String
  link String?
  userId String
  seen  Boolean @default(false)
  user Users @relation(fields: [userId], references: [id])
}

model Block {
  id Int @id @default(autoincrement())
  blockerId String
  blockedId String
  blocked Users @relation("blocked", fields: [blockerId], references: [id])
  blockedBy Users @relation("blockedBy", fields: [blockedId], references: [id])
  @@unique([blockerId, blockedId])
}

// enums 
enum RoomType {
  PRIVATE
  PROTECTED
  PUBLIC
}

enum RoomRoles {
  USER
  ADMIN
  OWNER
}

enum GameStatus {
  CEATED
  STARTED
  FINISHED
}

enum FriendRequestStatus {
  PENDING
  REGECTED
  CONFIRMED
}
